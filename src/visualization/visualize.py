import os
import matplotlib.pyplot as plt
import re

class Visualizer:
    def __init__(self,root_dir):
        self.root_dir = root_dir
        
    def generate_stats_from_log(self, model, experiment_name, line_interval=10, nb_data=10800, enforce_last_line=True):
        """
        Generate chart with all losses from log file generated by CycleGAN/Pix2pix/CUT framework
        """
        #extract every lines
        with open(os.path.join(self.root_dir, "models", model, experiment_name, "loss_log.txt"), 'r') as f:
            lines = f.readlines()
        #choose the lines to use for plotting
        lines_for_plot = []
        for i in range(1,len(lines)):
            if (i-1) % line_interval==0:
                lines_for_plot.append(lines[i])
        if enforce_last_line:
            lines_for_plot.append(lines[-1])
        #initialize dict with loss names
        dicts = dict()
        dicts["epoch"] = []
        parts = (lines_for_plot[0]).split(') ')[1].split(' ')
        for i in range(0, len(parts)//2):
            dicts[parts[2*i][:-1]] = []
        #extract all data
        pattern = "epoch: ([0-9]+), iters: ([0-9]+)"
        for l in lines_for_plot:
            search = re.search(pattern, l)
            try:
                epoch = int(search.group(1))
            except:
                continue
            epoch_floatpart = int(search.group(2))/nb_data
            dicts["epoch"].append(epoch+epoch_floatpart) #to allow several plots for the same epoch
            parts = l.split(') ')[1].split(' ')
            for i in range(0, len(parts)//2):
                try:
                    dicts[parts[2*i][:-1]].append(float(parts[2*i+1]))
                except:
                    dicts[parts[2*i][:-1]] = []
                    dicts[parts[2*i][:-1]].append(float(parts[2*i+1]))
        #plot everything
        plt.figure()
        for key in dicts.keys():
            # if (key != "epoch") & (key=="cycle_A"):
            if "_A" in key:
                if "cycle" in key:
                    line_width = 1
                else:
                    line_width =0.3
                plt.plot(dicts["epoch"], dicts[key], label=key, linewidth=line_width)
        plt.legend(loc="best")
        plt.savefig(os.path.join(self.root_dir, f"reports/figures/{model}_{experiment_name}.png"))
        plt.show()

if __name__ == '__main__':
    root_dir = "./"
    model = "cyclegan"
    experiment_name = "20220909"
    visualizer = Visualizer(root_dir)
    visualizer.generate_stats_from_log(model, experiment_name, line_interval=10, nb_data=3473)